generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @unique @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String       @id @unique @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String       @default("user")
  accounts      Account[]
  direcciones   Direccion[]
  evaluations   Evaluation[]
  orders        Order[]
  sessions      Session[]
  favorites     Product[]
}

model Direccion {
  id      String @id @unique @default(uuid())
  id_user String
  dir     String
  user    User   @relation(fields: [id_user], references: [id])
}

model Evaluation {
  id         String  @id @unique @default(uuid())
  id_product String
  id_user    String
  review     String
  rating     Int
  product    Product @relation(fields: [id_product], references: [id])
  user       User    @relation(fields: [id_user], references: [id])
}

model Order {
  id            String     @id @unique @default(uuid())
  id_user       String
  description   String
  total         Int
  status        StatusType
  date          DateTime   @default(now())
  delivery_time String
  user          User       @relation(fields: [id_user], references: [id])
  product       Product[]
}

model Product {
  id          String       @id @unique @default(uuid())
  name        String
  price       Int
  dimension   Int
  available   Boolean
  type        TypeDiet
  category    CategoryPro
  description String
  evaluation  Evaluation[]
  image       ImageProdu[]
  order       Order[]
  user        User[]
}

model ImageProdu {
  id         String  @id @default(uuid())
  image      String
  id_product String
  product    Product @relation(fields: [id_product], references: [id])
}

enum StatusType {
  pending
  in_progress
  canceled
  fullfiled
}

enum TypeDiet {
  vegan
  celiac
  vegan_celiac
  none
}

enum CategoryPro {
  cakes
  muffins
  cookies
  bakery
  desserts
  pies
  others
}
