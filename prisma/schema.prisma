generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @unique @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String       @id @unique @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String       @default("user")
  accounts      Account[]
  addresses     Address[]
  evaluations   Evaluation[]
  orders        Order[]
  sessions      Session[]
  favorites     Product[]
}

model Address {
  id            String  @id @unique @default(uuid())
  id_user       String
  name_address  String  @default("my Address")
  zip_code      Int
  street_name   String
  available     Boolean @default(true)
  street_number Int
  user          User    @relation(fields: [id_user], references: [id])
  phone         Phone?
}

model Phone {
  area_code     Int
  number        Int
  id_address    String  @id @default(uuid())
  addressFather Address @relation(fields: [id_address], references: [id])
}

model Order {
  id                String              @id @unique @default(uuid())
  addressOrder      AddressOrder        @relation(fields: [id_address], references: [id])
  date              DateTime            @default(now())
  purchasedProducts purchasedProducts[]
  product           Product[]
  status            StatusType
  id_user           String
  purchase_link     String
  delivery_time     String
  user              User                @relation(fields: [id_user], references: [id])
  id_address        String
  total             Int
}

model AddressOrder {
  id            String      @id @default(uuid())
  zip_code      Int
  street_name   String
  street_number Int
  phone         PhoneOrder?
  order         Order[]
}

model PhoneOrder {
  area_code  Int
  number     Int
  id_address String       @id @default(uuid())
  address    AddressOrder @relation(fields: [id_address], references: [id])
}

model purchasedProducts {
  id          String
  idPurcha    String @id @default(uuid())
  title       String
  picture_url String
  unit_price  Int
  quantity    Int
  id_order    String
  order       Order  @relation(fields: [id_order], references: [id])
}

model Evaluation {
  id         String  @id @unique @default(uuid())
  id_product String
  id_user    String
  review     String
  rating     Int
  product    Product @relation(fields: [id_product], references: [id])
  user       User    @relation(fields: [id_user], references: [id])
}

model Product {
  id          String       @id @unique @default(uuid())
  name        String
  price       Int
  dimension   Int
  available   Boolean
  type        TypeDiet
  category    CategoryPro
  description String
  evaluation  Evaluation[]
  image       ImageProdu[]
  order       Order[]
  user        User[]
}

model ImageProdu {
  id         String  @id @default(uuid())
  image      String
  id_product String
  product    Product @relation(fields: [id_product], references: [id])
}

enum StatusType {
  pending
  confirmed
  canceled
  in_process
  fulfilled
}

enum TypeDiet {
  vegan
  celiac
  vegan_celiac
  none
}

enum CategoryPro {
  cakes
  muffins
  cookies
  bakery
  desserts
  pies
  others
}
